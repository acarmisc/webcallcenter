<?php

/**
 * FarmaciaTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class FarmaciaTable extends Doctrine_Table
{
    /**
     * Returns an instance of this class.
     *
     * @return object FarmaciaTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('Farmacia');
    }
	/*Restituisce un array le cui componenti sono array con i dati delle farmacie trovate.
	 * L'argomento criteri è un array associativo con i nomi dei campi per cui si ricerca e il loro valore.
	 */
	public function ricercaFarmacia($criteri){
		$q=$this->createQuery()->
			select('f.id,f.denominazione,f.indirizzo,f.cap,f.localita,f.numtel,f.numfax,f.email,
			f.provincia_id as provincia,re.nome as regione,utad.nome_completo as advisor,
			utag.nome_completo as agente,f.flusso_lavoro,f.stato as stato, ag.id,ad.id,utag.id, utad.id,re.id,pr.id')->
			from('Farmacia f')->
			leftjoin('f.Provincia pr')->
			leftjoin('pr.Regione re')->
			leftjoin('f.Agente ag')->
			leftjoin('f.Advisor ad')->
			leftjoin('ag.Utente utag')->
			leftjoin('ad.Utente utad')->
			where('f.deleted_at IS NULL');
		$this->impostaCriteri($q, $criteri);
		$risultato=$q->execute(array(),Doctrine_Core::HYDRATE_ARRAY);

		if(count($risultato)>0){
			return $risultato;
		}else{
			return array();
		}
	}
	
	public function ricercaFarmaciaPerId($id){
		$q=$this->createQuery()->
			select('f.id,f.denominazione,f.indirizzo,f.cap,f.localita,f.numtel,f.numfax,f.email,
			f.provincia_id as provincia,f.agente_id,f.advisor_id,f.flusso_lavoro,f.note,f.note_boehringer,
			re.nome as regione,f.isf as isf,f.num_isf as num_isf,utad.nome_completo as advisor,
			utag.nome_completo as agente,f.stato as stato,ag.id,ad.id,utag.id, utad.id,re.id,pr.id')->
			from('Farmacia f')->
			leftjoin('f.Provincia pr')->
			leftjoin('pr.Regione re')->
			leftjoin('f.Agente ag')->
			leftjoin('f.Advisor ad')->
			leftjoin('ag.Utente utag')->
			leftjoin('ad.Utente utad')->
			where('f.deleted_at IS NULL')->
			andwhere('f.id = ?',$id);
		$risultato=$q->execute(array(),Doctrine_Core::HYDRATE_ARRAY);
		if(count($risultato)>0){
			return $risultato[0];
		}else{
			return null;
		}
	}
	
	public function getAttivitaPerFarma_Adv($advisor_id){
		$q=$this->createQuery()->
			select('f.id,f.denominazione,f.indirizzo,f.cap,f.localita,f.numtel,f.numfax,f.email,
			f.provincia_id as provincia,f.agente_id,f.advisor_id,f.flusso_lavoro,f.note,f.note_boehringer,
			f.isf as isf,f.num_isf as num_isf,utad.nome_completo as advisor,utag.nome_completo as agente,
			f.stato as stato,f.flusso_lavoro,at.giorno as giorno,at.ora_inizio as ora_inizio,ta.nome as nome,te.nome as campagna,at.stato as stato_attivita,
			at.data_chiusura as chiusura,ag.id,ad.id,utag.id, utad.id,at.id,te.id,ta.id')->
			from ('Farmacia f')->
			leftjoin('f.Attivitas at')->
			leftjoin('at.Tipoevento te')->
			leftjoin('at.Tipoattivita ta')->
			leftjoin('f.Advisor ad')->
			leftjoin('ad.Utente utad')->
			leftjoin('f.Agente ag')->
			leftjoin('ag.Utente utag')->
			where('f.deleted_at IS NULL');
			$this->impostaCriteri($q, array('advisor_id'=>$advisor_id));
			$risultato=$q->execute(array(),Doctrine_Core::HYDRATE_SCALAR);
			if(count($risultato)>0){
				return $risultato;
			}else{
				return array();
			}			
			
	}
	
	public function getFlussi_Lavoro(){
		$a=array('Flusso ordinario','Contattato da callcenter','Non contattato da callcenter');
		return $a;
	}
   public function getStatiCliente(){
   	return array('attivo','attivabile','non interessato','attivato da ADV');
   }
   
   public function getNumeroFarmacie(){
   		$q=$this->createQuery()->
   			select('COUNT(*)')->
   			from('Farmacia')->
   			where('deleted_at is null');
   		$r=$q->execute(array(),Doctrine_Core::HYDRATE_SINGLE_SCALAR);
    	return $r;
   }

   public function getNumeroFarmacieAttive(){
   		$q=$this->createQuery()->
   			select('COUNT(*)')->
   			from('Farmacia')->
   			where("stato='attivo' OR stato='attivato da ADV'")->
   			andWhere('deleted_at is null');
   		$r=$q->execute(array(),Doctrine_Core::HYDRATE_SINGLE_SCALAR);
    	return $r;
   }
   
   private function impostaCriteri($query,$criteri){
   //per ogni criterio previsto, verifico se è stato impostato e, in tal caso, aggiungo apposita condizione where
		if(isset($criteri['farmacia_id'])){
			$query->addwhere("f.id like ?","%".$criteri['farmacia_id']."%");
		}
		if(isset($criteri['denominazione'])){
			$query->addwhere("f.denominazione like ?","%".$criteri['denominazione']."%");
		}
		if(isset($criteri['indirizzo'])){
			$query->addwhere("f.indirizzo like ?","%".$criteri['indirizzo']."%");
		}
		if(isset($criteri['cap'])){
			$query->addwhere("f.cap like ?","%".$criteri['cap']."%");
		}
		if(isset($criteri['localita'])){
			$query->addwhere("f.localita like ?","%".$criteri['localita']."%");
		}
		if(isset($criteri['numtel'])){
			$query->addwhere("f.numtel like ?","%".$criteri['numtel']."%");
		}
		if(isset($criteri['numfax'])){
			$query->addwhere("f.numfax like ?","%".$criteri['numfax']."%");
		}
		if(isset($criteri['email'])){
			$query->addwhere("f.email like ?","%".$criteri['email']."%");
		}
		if(isset($criteri['regione_id'])){
			$query->addwhere("re.id = ?",$criteri['regione_id']);
		}
		if(isset($criteri['provincia_id'])){
			$query->addwhere("f.provincia_id = ?",$criteri['provincia_id']);
		}
		if(isset($criteri['advisor_id'])){
			$query->addwhere("ad.id = ?",$criteri['advisor_id']);
		}
		if(isset($criteri['agente_id'])){
			$query->addwhere("ag.id = ?",$criteri['agente_id']);
		}
		if(isset($criteri['stato'])){
			$query->addwhere("f.stato = ?",$criteri['stato']);
		}
		if(isset($criteri['flusso_lavoro'])){
			$query->addwhere("f.flusso_lavoro = ?",$criteri['flusso_lavoro']);
		}
   }
   

}