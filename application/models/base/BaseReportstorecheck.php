<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('Reportstorecheck', 'default');

/**
 * BaseReportstorecheck
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property integer $farmacia_id
 * @property integer $num_vetrine_terra
 * @property integer $uso_pc
 * @property integer $sito_internet
 * @property integer $analisi
 * @property integer $spazio_servizio
 * @property integer $aree_dedicate
 * @property integer $orario_continuato
 * @property integer $aperto24h
 * @property enum $giorno_chiusura
 * @property string $collaboratore_riferimento
 * @property string $titolare
 * @property enum $starchannel
 * @property integer $starwindow
 * @property integer $vetrina_almanacco
 * @property string $note
 * @property enum $fascia_negozio
 * @property enum $fascia_magazzino
 * @property enum $vicinanza
 * @property string $servizi
 * @property string $storico_modifiche
 * @property Attivita $Farmacia
 * @property Doctrine_Collection $GiacenzaProdotti
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseReportstorecheck extends Doctrine_Record
{
    public function setTableDefinition()
    {
        $this->setTableName('reportstorecheck');
        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             'fixed' => false,
             'unsigned' => true,
             'primary' => true,
             'autoincrement' => true,
             ));
        $this->hasColumn('farmacia_id', 'integer', 4, array(
            'type' => 'string',
             'length' => 20,
             'fixed' => true,
             'unsigned' => false,
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('num_vetrine_terra', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             'fixed' => false,
             'unsigned' => true,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('uso_pc', 'integer', 1, array(
             'type' => 'integer',
             'length' => 1,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('sito_internet', 'integer', 1, array(
             'type' => 'integer',
             'length' => 1,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('analisi', 'integer', 1, array(
             'type' => 'integer',
             'length' => 1,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('spazio_servizio', 'integer', 1, array(
             'type' => 'integer',
             'length' => 1,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('aree_dedicate', 'integer', 1, array(
             'type' => 'integer',
             'length' => 1,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('orario_continuato', 'integer', 1, array(
             'type' => 'integer',
             'length' => 1,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('aperto24h', 'integer', 1, array(
             'type' => 'integer',
             'length' => 1,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('giorno_chiusura', 'enum', 9, array(
             'type' => 'enum',
             'length' => 9,
             'fixed' => false,
             'unsigned' => false,
             'values' => 
             array(
              0 => 'lunedì',
              1 => 'martedì',
              2 => 'mercoledì',
              3 => 'giovedì',
              4 => 'venerdì',
              5 => 'sabato',
              6 => 'domenica',
			  7 => 'sab-lun',
			  8 => 'turnazione',
             ),
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('collaboratore_riferimento', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('titolare', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('starchannel', 'enum', 12, array(
             'type' => 'enum',
             'length' => 12,
             'fixed' => false,
             'unsigned' => false,
             'values' => 
             array(
              0 => 'non effettuata',
              1 => 'effettuata con successo',
              2 => 'effettuata senza successo',
             ),
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('starwindow', 'integer', 1, array(
             'type' => 'integer',
             'length' => 1,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('vetrina_almanacco', 'integer', 1, array(
             'type' => 'integer',
             'length' => 1,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('note', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             ));

        $this->hasColumn('fascia_negozio', 'enum', 12, array(
             'type' => 'enum',
             'length' => 12,
             'fixed' => false,
             'unsigned' => false,
             'values' => 
             array(
              0 => '30-60 mq',
              1 => '60-120 mq',
              2 => '120-200 mq',
              3 => '200-300 mq',
              3 => 'oltre 300 mq',
             ),
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('fascia_magazzino', 'enum', 16, array(
             'type' => 'enum',
             'length' => 16,
             'fixed' => false,
             'unsigned' => false,
             'values' => 
             array(
              0 => 'non ha magazzino',
              1 => 'sino a 20 mq',
              2 => '20-50 mq',
              3 => 'oltre 50 mq',
             ),
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('vicinanza', 'enum', 20, array(
             'type' => 'enum',
             'length' => 20,
             'fixed' => false,
             'unsigned' => false,
             'values' => 
             array(
              0 => 'Aeroporto/Terminal',
              1 => 'Ambulatorio medico',
              2 => 'Centro commerciale',
              3 => 'Casa di cura',
              4 => 'Ospedale',
              5 => 'Stazione ferroviaria',
              6 => 'Terminal portuale',
              7 => 'Fermata BUS/tram/metro',
              8 => 'Centro estetico-benessere',
              9 => 'Palestra-centro fitness',
              10 => 'Circolo ricreativo',
              11 => 'Zona shopping',
              12 => 'Nulla',
             ),
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             ));
         $this->hasColumn('servizi','string', 500, array(
             'type' => 'string',
             'length' => 500,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
         	 'default' => null,
             'autoincrement' => false,
             ));
          $this->hasColumn('storico_modifiche','string', 500, array(
             'type' => 'string',
             'length' => 500,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
         	 'default' => null,
             'autoincrement' => false,
             ));
          $this->hasColumn('coll_laureati', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             'fixed' => false,
             'unsigned' => true,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             ));
          $this->hasColumn('coll_nonlaureati', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             'fixed' => false,
             'unsigned' => true,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             ));
          $this->hasColumn('mq_calpestabili', 'enum', 12, array(
             'type' => 'enum',
             'length' => 12,
             'fixed' => false,
             'unsigned' => false,
             'values' => 
             array(
              0 => '30-60 mq',
              1 => '60-120 mq',
              2 => '120-200 mq',
              3 => '200-300 mq',
              3 => 'oltre 300 mq',
             ),
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('num_vetrine_finestra', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             'fixed' => false,
             'unsigned' => true,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('insegna_tradizionale', 'integer', 1, array(
             'type' => 'integer',
             'length' => 1,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('insegna_elettronica', 'integer', 1, array(
             'type' => 'integer',
             'length' => 1,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('insegna_accessori', 'integer', 1, array(
             'type' => 'integer',
             'length' => 1,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             ));
         $this->hasColumn('insegna_catene', 'integer', 1, array(
             'type' => 'integer',
             'length' => 1,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             ));
         $this->hasColumn('banconi_vendita', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             'fixed' => false,
             'unsigned' => true,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             ));
         $this->hasColumn('num_ingressi', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             'fixed' => false,
             'unsigned' => true,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             ));
          $this->hasColumn('cup', 'integer', 1, array(
             'type' => 'integer',
             'length' => 1,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('localizzazione', 'enum', 26, array(
             'type' => 'enum',
             'length' => 26,
             'fixed' => false,
             'unsigned' => false,
             'values' => 
             array(
              0 => 'centro città',
              1 => 'centro storico',
              2 => 'semicentro',
              3 => 'periferia',
              3 => 'ztl',
              4 => 'area pedonale',
              5 => 'località balneare',
              6 => 'turistica',
              7 => 'zona residenziale',
              8 => 'interno centro commerciale'
             ),
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             ));
             
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Farmacia', array(
             'local' => 'farmacia_id',
             'foreign' => 'id'));
        
        $this->hasMany('Giacenzaprodotto as GiacenzaProdotti',array(
        	  'local'=> 'id',
        	  'foreign' => 'reportstorecheck_id'));
        
                
        $softdelete0 = new Doctrine_Template_SoftDelete();
        $timestampable0 = new Doctrine_Template_Timestampable();
        $this->actAs($softdelete0);
        $this->actAs($timestampable0);
    
    }
}