<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('Attivita', 'default');

/**
 * BaseAttivita
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property date $giorno
 * @property time $ora_inizio
 * @property enum $stato
 * @property integer $tipoattivita_id
 * @property integer $tipoevento_id
 * @property string $farmacia_id
 * @property date $data_chiusura
 * @property Farmacia $Farmacia
 * @property Tipoattivita $Tipoattivita
 * @property Reportevento $ReportEvento
 * @property Reportpreevento $ReportPreevento
 * @property Tipoevento $Tipoevento
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseAttivita extends Doctrine_Record
{
    public function setTableDefinition()
    {
        $this->setTableName('attivita');
        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             'fixed' => false,
             'unsigned' => true,
             'primary' => true,
             'autoincrement' => true,
             ));
        $this->hasColumn('giorno', 'date', null, array(
             'type' => 'date',
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('ora_inizio', 'time', null, array(
             'type' => 'time',
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'default' => '00:01:00',
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('stato', 'enum', 6, array(
             'type' => 'enum',
             'length' => 6,
             'fixed' => false,
             'unsigned' => false,
             'values' => 
             array(
              0 => 'aperta',
              1 => 'chiusa',
             ),
             'primary' => false,
             'default' => 'aperta',
             'notnull' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('tipoattivita_id', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             'fixed' => false,
             'unsigned' => true,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('tipoevento_id', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             'fixed' => false,
             'unsigned' => true,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('farmacia_id', 'string', 20, array(
             'type' => 'string',
             'length' => 20,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('data_chiusura', 'date', null, array(
             'type' => 'date',
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('tipoevento_id', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             'fixed' => false,
             'unsigned' => true,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Farmacia', array(
             'local' => 'farmacia_id',
             'foreign' => 'id',
        	 'onUpdate' => 'CASCADE'));

        $this->hasOne('Tipoattivita', array(
             'local' => 'tipoattivita_id',
             'foreign' => 'id',
        	 'onUpdate' => 'CASCADE'));

        $this->hasOne('Reportevento as ReportEvento', array(
             'local' => 'id',
             'foreign' => 'attivita_id'));


        $this->hasOne('Reportpreevento as ReportPreevento', array(
             'local' => 'id',
             'foreign' => 'attivita_id'));
        
        $this->hasOne('Tipoevento',array(
        	  'local'=>'tipoevento_id',
        	  'foreign'=>'id'));
        
        
        
        $softdelete0 = new Doctrine_Template_SoftDelete();
        $timestampable0 = new Doctrine_Template_Timestampable();
        $this->actAs($softdelete0);
        $this->actAs($timestampable0);
    }
}