<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('Farmacia', 'default');

/**
 * BaseFarmacia
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property string $id
 * @property string $advisor_id
 * @property string $agente_id
 * @property string $denominazione
 * @property string $indirizzo
 * @property string $cap
 * @property string $localita
 * @property string $provincia_id
 * @property string $partita_iva
 * @property string $numtel
 * @property string $numfax
 * @property string $email
 * @property string $contatto
 * @property string $numtel_contatto
 * @property string $email_contatto
 * @property string $linea_id
 * @property string $microbrick_id
 * @property enum $stato
 * @property string $isf
 * @property string $num_isf
 * @property enum $flusso_lavoro
 * @property string $note_boehringer
 * @property string $note
 * @property Advisor $Advisor
 * @property Agente $Agente
 * @property Linea $Linea
 * @property Microbrick $Microbrick
 * @property Provincia $Provincia
 * @property Doctrine_Collection $Attivita
 * @property Doctrine_Collection $Reportstorecheck
 * @property Doctrine_Collection $RichiesteTipoevento
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseFarmacia extends Doctrine_Record
{
    public function setTableDefinition()
    {
        $this->setTableName('farmacia');
        $this->hasColumn('id', 'string', 20, array(
             'type' => 'string',
             'length' => 20,
             'fixed' => true,
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('advisor_id', 'string', 10, array(
             'type' => 'string',
             'length' => 10,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('agente_id', 'string', 10, array(
             'type' => 'string',
             'length' => 10,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('denominazione', 'string', 100, array(
             'type' => 'string',
             'length' => 100,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'default' => '',
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('indirizzo', 'string', 100, array(
             'type' => 'string',
             'length' => 100,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'default' => '',
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('cap', 'string', 5, array(
             'type' => 'string',
             'length' => 5,
             'fixed' => true,
             'unsigned' => false,
             'primary' => false,
             'default' => '',
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('localita', 'string', 50, array(
             'type' => 'string',
             'length' => 50,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'default' => '',
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('provincia_id', 'string', 4, array(
             'type' => 'string',
             'length' => 4,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('partita_iva', 'string', 20, array(
             'type' => 'string',
             'length' => 20,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'default' => '',
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('numtel', 'string', 30, array(
             'type' => 'string',
             'length' => 30,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'default' => '',
             'notnull' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('numfax', 'string', 30, array(
             'type' => 'string',
             'length' => 30,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'default' => '',
             'notnull' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('email', 'string', 100, array(
             'type' => 'string',
             'length' => 100,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('contatto', 'string', 50, array(
             'type' => 'string',
             'length' => 50,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'default' => '',
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('numtel_contatto', 'string', 15, array(
             'type' => 'string',
             'length' => 15,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'default' => '',
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('email_contatto', 'string', 15, array(
             'type' => 'string',
             'length' => 15,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'default' => '',
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('linea_id', 'string', 10, array(
             'type' => 'string',
             'length' => 10,
             'fixed' => true,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('microbrick_id', 'string', 10, array(
             'type' => 'string',
             'length' => 10,
             'fixed' => true,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('stato', 'enum', 15, array(
             'type' => 'enum',
             'length' => 15,
             'fixed' => false,
             'unsigned' => false,
             'values' => 
             array(
              0 => 'attivo',
              1 => 'attivabile',
              2 => 'non interessato',
              3 => 'attivato da ADV',
             ),
             'primary' => false,
             'default' => 'attivabile',
             'notnull' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('isf', 'string', 50, array(
             'type' => 'string',
             'length' => 50,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('num_isf', 'string', 15, array(
             'type' => 'string',
             'length' => 15,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'default' => '',
             'notnull' => true,
             'autoincrement' => false,
             ));
            $this->hasColumn('flusso_lavoro', 'enum', 28, array(
             'type' => 'enum',
             'length' => 28,
             'fixed' => false,
        	 'default'=> 'Flusso ordinario',
             'values' => 
             array(
              0 => 'Flusso ordinario',
              1 => 'Contattato da callcenter',
              2 => 'Non contattato da callcenter'
             ),
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('note_boehringer', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
        	 'default' => '',
             'autoincrement' => false,
             ));   
        $this->hasColumn('note', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
        	 'default' => '',
             'autoincrement' => false,
             ));          
    }
    

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Advisor', array(
             'local' => 'advisor_id',
             'foreign' => 'id',
        	 'onUpdate' => 'CASCADE'));

        $this->hasOne('Agente', array(
             'local' => 'agente_id',
             'foreign' => 'id',
        	 'onUpdate' => 'CASCADE'));

        $this->hasOne('Linea', array(
             'local' => 'linea_id',
             'foreign' => 'id',
        	 'onUpdate' => 'CASCADE'));

        $this->hasOne('Microbrick', array(
             'local' => 'microbrick_id',
             'foreign' => 'id',
        	 'onUpdate' => 'CASCADE'));

        $this->hasOne('Provincia', array(
             'local' => 'provincia_id',
             'foreign' => 'id',
        	 'onUpdate' => 'CASCADE'));

        $this->hasMany('Attivita as Attivitas', array(
             'local' => 'id',
             'foreign' => 'farmacia_id'));

        $this->hasMany('Reportstorecheck', array(
             'local' => 'id',
             'foreign' => 'farmacia_id'));

        $this->hasMany('RichiestaTipoevento as RichiesteTipoevento', array(
             'local' => 'id',
             'foreign' => 'farmacia_id'));
        
        $this->hasOne('Eventi_1_view', array(
             'local' => 'id',
             'foreign' => 'id'));
        
        $this->hasOne('Eventi_2_view', array(
             'local' => 'id',
             'foreign' => 'id'));
        
        $this->hasOne('Eventi_3_view', array(
             'local' => 'id',
             'foreign' => 'id'));
        
        $this->hasOne('Eventi_4_view', array(
             'local' => 'id',
             'foreign' => 'id'));
        
        $this->hasOne('Eventi_5_view', array(
             'local' => 'id',
             'foreign' => 'id'));
        
        $this->hasOne('Farmacie_attivate_agente_view', array(
             'local' => 'id',
             'foreign' => 'id'));
        $this->hasOne('Farmacie_attivate_advisor_view', array(
             'local' => 'id',
             'foreign' => 'id'));  
        
        $softdelete0 = new Doctrine_Template_SoftDelete();
        $timestampable0 = new Doctrine_Template_Timestampable();
        $this->actAs($softdelete0);
        $this->actAs($timestampable0);
    }
}